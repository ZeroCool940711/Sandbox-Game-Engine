/******************************************************************************
BigWorld Technology
Copyright BigWorld Pty, Ltd.
All Rights Reserved. Commercial in confidence.

WARNING: This computer program is protected by copyright law and international
treaties. Unauthorized use, reproduction or distribution of this program, or
any portion of this program, may result in the imposition of civil and
criminal penalties as provided by law.
******************************************************************************/

/**
 * This file was automatically generated by PHP ext_skel and then
 * subsequently modified for C++ support.
 *
 */

#define MODULE_VERSION "1.0"

// this module embeds a Python interpreter into the PHP process.
#include <Python.h>

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

extern "C"
{
#include "php.h"
#include "php_ini.h"
#include "ext/standard/info.h"
}

#include "php_bigworld.h"
#include "functions.hpp"

#include <pwd.h>

ZEND_DECLARE_MODULE_GLOBALS( bigworld_php )
static PHP_GINIT_FUNCTION( bigworld_php );

/* True global resources - no need for thread safety here */
static int le_bigworld_php;

/** The list entry for PyObject* resources */
int le_pyobject;


/* PHP Module Function enumeration.
 *
 * Every user visible function must have an entry in bigworld_php_functions[].
 */
function_entry bigworld_php_functions[] =
{
	PHP_FE( bw_logon, NULL )
//	PHP_FE( bw_test, NULL )
	PHP_FE( bw_look_up_entity_by_name, NULL )
	PHP_FE( bw_look_up_entity_by_dbid, NULL )
	PHP_FE( bw_exec, NULL )
	PHP_FE( bw_set_nub_port, NULL )
	PHP_FE( bw_serialise, NULL )
	PHP_FE( bw_deserialise, NULL )
	PHP_FE( bw_pystring, NULL )
	PHP_FE( bw_set_default_keep_alive_seconds, NULL )
	PHP_FE( bw_set_keep_alive_seconds, NULL )
	PHP_FE( bw_get_keep_alive_seconds, NULL )
	{ NULL, NULL, NULL }	/* 	Must be the last line in
							bigworld_functions[] */
};


/**
 * The BigWorld Zend module entry.
 */
zend_module_entry bigworld_php_module_entry =
{
	STANDARD_MODULE_HEADER,
	"bigworld_php",
	bigworld_php_functions,
	PHP_MINIT( bigworld_php ),
	PHP_MSHUTDOWN( bigworld_php ),
	PHP_RINIT( bigworld_php ),
	PHP_RSHUTDOWN( bigworld_php ),
	PHP_MINFO( bigworld_php ),
	MODULE_VERSION,
	PHP_MODULE_GLOBALS( bigworld_php ),
	PHP_GINIT( bigworld_php ),
	STANDARD_MODULE_PROPERTIES_EX
};

#ifdef COMPILE_DL_BIGWORLD_PHP
BEGIN_EXTERN_C()
ZEND_GET_MODULE( bigworld_php )
END_EXTERN_C()
#endif


/**
 * PHP Initialisation file configuration variable setup.
 */
PHP_INI_BEGIN()
	// bigworld.additional_python_paths: add path to Python BigWorld module
	// here
	STD_PHP_INI_ENTRY( "bigworld.additional_python_paths", "",
		PHP_INI_SYSTEM, OnUpdateString, addPythonPaths,
			zend_bigworld_php_globals, bigworld_php_globals )

	// bigworld.uid: the user ID to run the module as (this affects which
	// servers the module has access to). By default, this is set to the PHP
	// user.
	STD_PHP_INI_ENTRY( "bigworld.uid", "0",
		PHP_INI_SYSTEM, OnUpdateLong, uid,
			zend_bigworld_php_globals, bigworld_php_globals )

	// bigworld.debug_level: set the debugging level to be output to PHP's
	// error log
	STD_PHP_INI_ENTRY( "bigworld.debug_level", "0",
		PHP_INI_ALL, OnUpdateLong, debugLevel,
			zend_bigworld_php_globals, bigworld_php_globals )
PHP_INI_END()


/**
 * PHP global initialisation function. This also includes any php.ini
 * configuration variables.
 */
static PHP_GINIT_FUNCTION( bigworld_php )
{
	bigworld_php_globals->addPythonPaths = NULL;
	bigworld_php_globals->uid = 0;
	bigworld_php_globals->debugLevel = 0;
	bigworld_php_globals->bwModule = NULL;
}


/**
 * PHP Module initialisation function.
 */
PHP_MINIT_FUNCTION( bigworld_php )
{
	REGISTER_INI_ENTRIES();

	// register destruction handler for PyObject non-persistent resources
	le_pyobject = zend_register_list_destructors_ex(
		PyObject_ResourceDestructionHandler,
		NULL, "PyObject", module_number );

	// fire up the main Python interpreter
	Py_Initialize();

	uid_t uid = BWG( uid );
	struct passwd * pPasswdEntry = getpwuid( uid );
	const char * homeDir = pPasswdEntry->pw_dir;

	char uidString[64];
	snprintf( uidString, 64, "%ld", uid );

	setenv( "UID", uidString, 1 /*overwrite*/ );
	setenv( "HOME", homeDir, 1 /*overwrite*/ );

	// TODO: if bigworld.additional_python_paths is not supplied, append
	// the $(MF_ROOT)/bigworld/bin/web directory
	// Get MF_ROOT from $(HOME)/.bwmachined.conf

	appendAdditionalPythonPaths( BWG( addPythonPaths ) );

	// do the import
	BWG( bwModule ) = PyImport_ImportModule( "BigWorld" );
	if (!BWG( bwModule ))
	{
		PyErr_Clear();
		zend_error( E_ERROR,  "Could not import BigWorld.so module, "
				"with additional_python_paths = \"%s\"\n",
			BWG( addPythonPaths ) );
		return FAILURE;
	}

	return SUCCESS;
}


/**
 * PHP Module shutdown function.
 */
PHP_MSHUTDOWN_FUNCTION( bigworld_php )
{
	Py_XDECREF( BWG( bwModule ) );
	BWG( bwModule ) = NULL;

	Py_Finalize();

	UNREGISTER_INI_ENTRIES();

	return SUCCESS;
}

/**
 * Request initialisation function.
 */
PHP_RINIT_FUNCTION( bigworld_php )
{
	return SUCCESS;
}


/**
 * Request shutdown function.
 */
PHP_RSHUTDOWN_FUNCTION( bigworld_php )
{
	return SUCCESS;
}


/**
 * Module Info function.
 */
PHP_MINFO_FUNCTION( bigworld_php )
{
	DISPLAY_INI_ENTRIES();
}
